{"version":3,"sources":["webpack:///./src/legacyCodingBestPractices.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className","metastring","cleanup.","Clean","up","code."],"mappings":"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","file":"static/js/src-legacy-coding-best-practices.990742b2.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"coding-best-practices\"}}>{`Coding Best Practices`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The more uniform our code is across the organization, the easier time we will have maintaining it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Follow established coding standards\nDrupal, Wordpress and Magento all have their own coding standards documents. Projects in these frameworks should follow their respective standards strictly. Laravel and Symfony projects should follow PSR 1 - 4.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Follow the TAG Front-End Best Practices\nSome of these can be counterintuitive at first (such as avoiding nested SCSS); however, these will help to reduce the maintenance effort for front-end code.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Avoid indentation\nLots of nested code blocks can make code much harder to read. Whenever practical, avoid nesting indented blocks. For instance:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`if (\\$condition) {\n  foreach (\\$collection as \\$item) {\n    if (\\$other_condition) {\ndo_something(\\\\$item);\n}\n}\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`should be refactored as:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`if (!\\$condition) {\n  return;\n}\nforeach (\\$collection as \\$item) {\n  if (!\\$other_condition) {\ncontinue;\n}\ndo_something(\\\\$item);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Avoid elseif\nLong strings of elseifs can be difficult to follow. Prefer switch or the method described in \"Avoid indention\" whenever practical.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Comments: Answer \"Why?\", not \"What?\"\nComments should not summarize what some code is trying to do. Instead, it should explain why the code is necessary. For instance:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// If this is a local environment:\nif (!empty(\\$base_insecure_url) && strpos(\\$base_insecure_url, 'http://local') === 0) {\n// Returns early.\nreturn;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`should be refactored as:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`if (!empty(\\$base_insecure_url) && strpos(\\$base_insecure_url, 'http://local') === 0) {\n// The rest of this function only applies to non-local environments.\nreturn;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"php\"}}>{`PHP`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Don't query the DB inside a loop\nThis is very important for performance and scalability. Consider the following:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`\\$titles = array();\nforeach (\\$nids as \\$nid) {\n  \\$node = node_load(\\$nid);\n  \\$titles[] = \\\\$node->title;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This code adds N additional SELECT queries per invocation. This can rapidly become an issue as the number of elements in the \\\\$nids array grows. This should be refactored as so:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`\\$titles = array();\n\\$nodes = node_load_multiple(\\$nids);\nforeach (\\$nodes as \\$node) {\n  \\$titles[] = \\\\$node->title;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now we're only adding a single query, regardless of the number of records being returned.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"drupal\"}}>{`Drupal`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Use variables for configuration values`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Configuration values such as external API endpoints and keys, client contact info and any other non-content data that may change in the future should be stored as Drupal variables. Do this either with variable_set() in a release script or by adding it as a \\\\$conf value in settings.php. This is especially true for values which should change based on the environment (dev/test/prod).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Keep your .module file clean`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As long as a module is enabled, the .module file is loaded every time Drupal is bootstrapped. It is very important to keep this file as small as practical so that performance isn't impacted. As an extension of this, do not use global includes in your .module files. Instead, do use includes inside of functions. The only functions that belong in a .module file are hook`}<MDXTag name=\"em\" components={components} parentName=\"p\">{` and theme`}</MDXTag>{` implementations. Everything else should be refactored out into separate files and only included when needed.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"git\"}}>{`Git`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Give your branches meaningful names`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Unless your project lead specifies otherwise, use the following branch naming format: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<base branch>+<ticket number>`}</MDXTag>{`. For instance, my branch for JIRA ticket SWS-109, which went into the 4.1.0 release branch, was named v4.1.0+SWS-109.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Use full sentences in your commit messages`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Commit messages should be full sentences in the imperative mood. Whenever applicable, include the JIRA ticket number in the comment.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Bad`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-Code\",\"metastring\":\"cleanup.\",\"cleanup.\":true}}>{`Skeleton for new QuickenExport module.\nDownload URL should not be required (GP-97).\nRemoving unnecessary use statement and fixing indentation.\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Good`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-JIRA-123:\",\"metastring\":\"Clean up code.\",\"Clean\":true,\"up\":true,\"code.\":true}}>{`JIRA-123: Add the skeleton for the new QuickenExport module.\nMake Download URL not required (GP-97).\nJIRA-123: Remove unnecessary use statement and fix indentation.\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}